var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import { required, useGetManyReference, useRecordContext, TestMemoryRouter, ResourceContextProvider, } from 'ra-core';
import { AdminContext, Edit, PrevNextButtons, SimpleForm, TopToolbar, Toolbar as RAToolbar, SaveButton, } from 'ra-ui-materialui';
import { useWatch } from 'react-hook-form';
import fakeRestDataProvider from 'ra-data-fakerest';
import { Routes, Route } from 'react-router-dom';
import Mention from '@tiptap/extension-mention';
import { ReactRenderer } from '@tiptap/react';
import tippy from 'tippy.js';
import { DefaultEditorOptions, RichTextInput, } from './RichTextInput';
import { RichTextInputToolbar } from './RichTextInputToolbar';
import { Button, List, ListItem, ListItemButton, ListItemText, Paper, } from '@mui/material';
import { FormatButtons } from './buttons';
export default { title: 'ra-input-rich-text/RichTextInput' };
var FormInspector = function (_a) {
    var _b = _a.name, name = _b === void 0 ? 'body' : _b;
    var value = useWatch({ name: name });
    return (React.createElement("div", { style: { backgroundColor: 'lightgrey' } },
        name,
        " value in form:\u00A0",
        React.createElement("code", null,
            JSON.stringify(value),
            " (",
            typeof value,
            ")")));
};
var i18nProvider = {
    translate: function (key, options) { var _a; return (_a = options === null || options === void 0 ? void 0 : options._) !== null && _a !== void 0 ? _a : key; },
    changeLocale: function () { return Promise.resolve(); },
    getLocale: function () { return 'en'; },
};
export var Basic = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { source: "body" }),
            React.createElement(FormInspector, null))))); };
export var Disabled = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { source: "body", disabled: true }),
            React.createElement(FormInspector, null))))); };
export var ReadOnly = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { source: "body", readOnly: true }),
            React.createElement(FormInspector, null))))); };
export var Small = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { toolbar: React.createElement(RichTextInputToolbar, { size: "small" }), label: "Body", source: "body" }),
            React.createElement(FormInspector, null))))); };
export var Medium = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { toolbar: React.createElement(RichTextInputToolbar, { size: "medium" }), label: "Body", source: "body" }),
            React.createElement(FormInspector, null))))); };
export var Large = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { toolbar: React.createElement(RichTextInputToolbar, { size: "large" }), label: "Body", source: "body" }),
            React.createElement(FormInspector, null))))); };
export var FullWidth = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { toolbar: React.createElement(RichTextInputToolbar, null), label: "Body", source: "body", fullWidth: true }),
            React.createElement(FormInspector, null))))); };
export var Sx = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { label: "Body", source: "body", sx: { border: '1px solid red' } }),
            React.createElement(FormInspector, null))))); };
export var Validation = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { label: "Body", source: "body", validate: required() }),
            React.createElement(FormInspector, null))))); };
var MyRichTextInputToolbar = function (_a) {
    var props = __rest(_a, []);
    return (React.createElement(RichTextInputToolbar, __assign({}, props),
        React.createElement(FormatButtons, null)));
};
export var Toolbar = function (props) { return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
    React.createElement(ResourceContextProvider, { value: "posts" },
        React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, onSubmit: function () { } }, props),
            React.createElement(RichTextInput, { source: "body", toolbar: React.createElement(MyRichTextInputToolbar, null) }),
            React.createElement(FormInspector, null))))); };
export var EditorReference = function (props) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var editorRef = React.useRef(null);
    var EditorToolbar = function () { return (React.createElement(RAToolbar, null,
        React.createElement(SaveButton, null),
        React.createElement(Button, { onClick: function () {
                editorRef.current.commands.setContent('<h3>Here is my template</h3>');
            } }, "Use template"))); };
    return (React.createElement(AdminContext, { i18nProvider: i18nProvider },
        React.createElement(ResourceContextProvider, { value: "posts" },
            React.createElement(SimpleForm, __assign({ defaultValues: { body: 'Hello World' }, toolbar: React.createElement(EditorToolbar, null), onSubmit: function () { } }, props),
                React.createElement(RichTextInput, { source: "body", editorOptions: __assign(__assign({}, DefaultEditorOptions), { onCreate: function (_a) {
                            var editor = _a.editor;
                            editorRef.current = editor;
                        } }) }),
                React.createElement(FormInspector, null)))));
};
var dataProvider = fakeRestDataProvider({
    posts: [
        { id: 1, body: 'Post 1' },
        { id: 2, body: 'Post 2' },
        { id: 3, body: 'Post 3' },
    ],
    tags: [
        { id: 1, name: 'tag1', post_id: 1 },
        { id: 2, name: 'tag2', post_id: 1 },
        { id: 3, name: 'tag3', post_id: 2 },
        { id: 4, name: 'tag4', post_id: 2 },
        { id: 5, name: 'tag5', post_id: 3 },
        { id: 6, name: 'tag6', post_id: 3 },
    ],
});
var MyRichTextInput = function (props) {
    var record = useRecordContext();
    var tags = useGetManyReference('tags', {
        target: 'post_id',
        id: record.id,
    });
    var editorOptions = React.useMemo(function () {
        var _a, _b;
        return __assign(__assign({}, DefaultEditorOptions), { extensions: __spreadArray(__spreadArray([], DefaultEditorOptions.extensions, true), [
                Mention.configure({
                    HTMLAttributes: {
                        class: 'mention',
                    },
                    suggestion: suggestions((_b = (_a = tags.data) === null || _a === void 0 ? void 0 : _a.map(function (t) { return t.name; })) !== null && _b !== void 0 ? _b : []),
                }),
            ], false) });
    }, [tags.data]);
    return React.createElement(RichTextInput, __assign({ editorOptions: editorOptions }, props));
};
export var CustomOptions = function () { return (React.createElement(TestMemoryRouter, { initialEntries: ['/posts/1'] },
    React.createElement(AdminContext, { dataProvider: dataProvider },
        React.createElement(Routes, null,
            React.createElement(Route, { path: "/posts/:id", element: React.createElement(Edit, { resource: "posts", actions: React.createElement(TopToolbar, null,
                        React.createElement(PrevNextButtons, null)) },
                    React.createElement(SimpleForm, null,
                        React.createElement(MyRichTextInput, { source: "body" }))) }))))); };
var MentionList = React.forwardRef(function (props, ref) {
    var _a = React.useState(0), selectedIndex = _a[0], setSelectedIndex = _a[1];
    var selectItem = function (index) {
        var item = props.items[index];
        if (item) {
            props.command({ id: item });
        }
    };
    var upHandler = function () {
        setSelectedIndex((selectedIndex + props.items.length - 1) % props.items.length);
    };
    var downHandler = function () {
        setSelectedIndex((selectedIndex + 1) % props.items.length);
    };
    var enterHandler = function () {
        selectItem(selectedIndex);
    };
    React.useEffect(function () { return setSelectedIndex(0); }, [props.items]);
    React.useImperativeHandle(ref, function () { return ({
        onKeyDown: function (_a) {
            var event = _a.event;
            if (event.key === 'ArrowUp') {
                upHandler();
                return true;
            }
            if (event.key === 'ArrowDown') {
                downHandler();
                return true;
            }
            if (event.key === 'Enter') {
                enterHandler();
                return true;
            }
            return false;
        },
    }); });
    return (React.createElement(Paper, null,
        React.createElement(List, { dense: true, disablePadding: true }, props.items.length ? (props.items.map(function (item, index) { return (React.createElement(ListItemButton, { dense: true, selected: index === selectedIndex, key: index, onClick: function () { return selectItem(index); } }, item)); })) : (React.createElement(ListItem, { className: "item", dense: true },
            React.createElement(ListItemText, null, "No result"))))));
});
var suggestions = function (tags) {
    return {
        items: function (_a) {
            var query = _a.query;
            return tags
                .filter(function (item) {
                return item.toLowerCase().startsWith(query.toLowerCase());
            })
                .slice(0, 5);
        },
        render: function () {
            var component;
            var popup;
            return {
                onStart: function (props) {
                    component = new ReactRenderer(MentionList, {
                        props: props,
                        editor: props.editor,
                    });
                    if (!props.clientRect) {
                        return;
                    }
                    popup = tippy('body', {
                        getReferenceClientRect: props.clientRect,
                        appendTo: function () { return document.body; },
                        content: component.element,
                        showOnCreate: true,
                        interactive: true,
                        trigger: 'manual',
                        placement: 'bottom-start',
                    });
                },
                onUpdate: function (props) {
                    if (component) {
                        component.updateProps(props);
                    }
                    if (!props.clientRect) {
                        return;
                    }
                    if (popup && popup[0]) {
                        popup[0].setProps({
                            getReferenceClientRect: props.clientRect,
                        });
                    }
                },
                onKeyDown: function (props) {
                    if (popup && popup[0] && props.event.key === 'Escape') {
                        popup[0].hide();
                        return true;
                    }
                    if (!component.ref) {
                        return false;
                    }
                    return component.ref.onKeyDown(props);
                },
                onExit: function () {
                    queueMicrotask(function () {
                        if (popup && popup[0] && !popup[0].state.isDestroyed) {
                            popup[0].destroy();
                        }
                        if (component) {
                            component.destroy();
                        }
                        // Remove references to the old popup and component upon destruction/exit.
                        // (This should prevent redundant calls to `popup.destroy()`, which Tippy
                        // warns in the console is a sign of a memory leak, as the `suggestion`
                        // plugin seems to call `onExit` both when a suggestion menu is closed after
                        // a user chooses an option, *and* when the editor itself is destroyed.)
                        popup = undefined;
                        component = undefined;
                    });
                },
            };
        },
    };
};
//# sourceMappingURL=RichTextInput.stories.js.map